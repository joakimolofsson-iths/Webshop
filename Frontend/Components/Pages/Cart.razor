@page "/cart"
@using Models
@using Frontend.Components.Pages.UIComponents
@inject Frontend.Services.BookService bookService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@rendermode InteractiveServer

<h3>Cart</h3>

@if (_books == null || !_books.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var bookId in _cart)
    {
        var book = _books.FirstOrDefault(b => b.Id == bookId);
        if (book != null)
        {
            <BookProduct Book="book" Cart="_cart" OnCartUpdated="UpdateCart" />
        }
    }
}

@code {
    private List<Book> _books = new();
    private List<int> _cart = new();

    protected override async Task OnInitializedAsync()
    {
        _books = await bookService.GetBooksAsync() ?? new List<Book>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _cart = await localStorage.GetItemAsync<List<int>>("cart") ?? new List<int>();
            StateHasChanged();
        };
    }

    private void UpdateCart(List<int> updatedCart)
    {
        _cart = updatedCart;
        StateHasChanged();  // Trigger a re-render after cart is updated
    }
}
