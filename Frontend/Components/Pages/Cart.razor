@page "/cart"
@using Models
@using Frontend.Components.Pages.UIComponents
@inject Frontend.Services.MoviesService moviesService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (_movies == null || !_movies.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    _totalPrice = 0;

    <div class="cartItemsContainer">
        @foreach (var movieId in _cart)
        {
            var movie = _movies.FirstOrDefault(b => b.Id == movieId);
            if (movie != null)
            {
                <CartItem Movie="movie" Cart="_cart" OnCartUpdated="UpdateCart" />
                _totalPrice += movie.Price;
            }
        }

        <p>Total Price: $@Math.Round(_totalPrice, 2)</p>
    </div>   
}

@* Gör detta till en komponent *@
<div class="formContainer">
    <EditForm Model="@_checkout" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div>
            <InputText id="firstName" @bind-Value="_checkout.FirstName" placeholder=" " />
            <label for="firstName">First Name</label>
            <ValidationMessage For="@(() => _checkout.FirstName)" />
        </div>

        <div>
            <InputText id="lastName" @bind-Value="_checkout.LastName" placeholder=" " />
            <label for="lastName">Last Name</label>
            <ValidationMessage For="@(() => _checkout.LastName)" />
        </div>

        <div>
            <InputText id="email" type="email" @bind-Value="_checkout.Email" placeholder=" " />
            <label for="email">E-Mail</label>
            <ValidationMessage For="@(() => _checkout.Email)" />
        </div>

        <div>
            <InputText id="phone" type="tel" @bind-Value="_checkout.Phone" placeholder=" " />
            <label for="phone">Phone Number</label>
            <ValidationMessage For="@(() => _checkout.Phone)" />
        </div>

        <div>
            <InputText id="city" @bind-Value="_checkout.City" placeholder=" " />
            <label for="city">City</label>
            <ValidationMessage For="@(() => _checkout.City)" />
        </div>

        <div>
            <InputText id="street" @bind-Value="_checkout.Street" placeholder=" " />
            <label for="street">Street Address</label>
            <ValidationMessage For="@(() => _checkout.Street)" />
        </div>

        <div>
            <InputText id="zipCode" type="tel" @bind-Value="_checkout.ZipCode" placeholder=" " />
            <label for="zipCode">ZIP Code</label>
            <ValidationMessage For="@(() => _checkout.ZipCode)" />
        </div>

        <button type="submit">Confirm Order</button>
    </EditForm>
</div>


@code {
    private List<Movie> _movies = new();
    private List<int> _cart = new();
    private double _totalPrice;
    private Checkout _checkout = new Checkout();

    protected override async Task OnInitializedAsync()
    {
        _movies = await moviesService.GetMoviesAsync() ?? new List<Movie>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _cart = await localStorage.GetItemAsync<List<int>>("cart") ?? new List<int>();
            StateHasChanged();
        };
    }

    private void UpdateCart(List<int> updatedCart)
    {
        _cart = updatedCart;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        await localStorage.SetItemAsync("checkoutData", _checkout);
        Navigation.NavigateTo("/confirmation");
    }
}
