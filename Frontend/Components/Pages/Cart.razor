@page "/cart"
@using Models
@using Frontend.Components.Pages.UIComponents
@inject Frontend.Services.MoviesService moviesService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Cart</PageTitle>

<article class="cartContainer">

    <header>
        <h1>Cart</h1>
    </header>

    @if (_movies == null || !_movies.Any())
    {
        <Loading />
    }
    else
    {
        _totalPrice = 0;

        <section>
            <ul class="cartItems">
                @foreach (var movieId in _cart)
                {
                    var movie = _movies.FirstOrDefault(b => b.Id == movieId);
                    if (movie != null)
                    {
                        <li>
                            <CartItem Movie="movie" Cart="_cart" OnCartUpdated="UpdateCart" />
                        </li>

                        _totalPrice += movie.Price;
                    }
                }
            </ul>
        </section>

        <section>
            <p class="totalPrice"><span>Total Price:</span> $@Math.Round(_totalPrice, 2)</p>
        </section>
    }

    <section class="formSection">
        <CheckoutForm CheckoutModel="@_checkout" OnSubmit="HandleSubmit" />
    </section>

</article>

@code {
    private List<Movie> _movies = new();
    private List<int> _cart = new();
    private double _totalPrice;
    private Checkout _checkout = new Checkout();

    protected override async Task OnInitializedAsync()
    {
        _movies = await moviesService.GetMoviesAsync() ?? new List<Movie>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _cart = await localStorage.GetItemAsync<List<int>>("cart") ?? new List<int>();
            StateHasChanged();
        };
    }

    private void UpdateCart(List<int> updatedCart)
    {
        _cart = updatedCart;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        await localStorage.SetItemAsync("checkoutData", _checkout);
        Navigation.NavigateTo("/orderconfirm");
    }
}
