@page "/books/{id:int}"
@using Models
@using Frontend.Components.Pages.UIComponents
@inject Frontend.Services.BookService bookService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@rendermode InteractiveServer

<h3>HorrorBookDetails</h3>

@if (_book == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <img src="@_book.ImageUrl" width="400" />
        <p>Name: @_book.Name</p>
        <p>Author: @_book.Author</p>
        <p>Description: @_book.Description</p>
        <p>Release Year: @_book.ReleaseYear</p>
        <p>Pages: @_book.Pages</p>
        <p>Rating: @_book.Rating</p>
        <p>Award: @_book.Award</p>
        <p>Price: $@_book.Price</p>
        <AddRemove BookId=_book.Id Cart=_cart Setting="add" />
        <AddRemove BookId=_book.Id Cart=_cart Setting="remove" />
    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private Book? _book;
    private List<int> _cart = new();

    protected override async Task OnInitializedAsync()
    {
        _book = await bookService.GetBookAsync(id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            _cart = await localStorage.GetItemAsync<List<int>>("cart") ?? new List<int>();
            StateHasChanged();
        };
    }
}
