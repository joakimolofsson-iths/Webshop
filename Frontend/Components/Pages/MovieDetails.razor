@page "/movies/{id:int}"
@using Models
@using Frontend.Components.Pages.UIComponents
@inject Frontend.Services.MoviesService moviesService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@rendermode InteractiveServer

@if (_movie == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="movieDetailsContainer">

        <div class="movieImage">
            <img src="@_movie.ImageUrl" />
        </div>

        <div class="movieDetails">

            <header>
                <h1>@_movie.Title</h1>
            </header>
            
            <br />

            <p><span class="darkerColor">Director</span></p>
            <p>@_movie.Director</p>
            <br />

            <p><span class="darkerColor">Writers</span></p>
            <p>@string.Join(", ", _movie.Writers)</p>
            <br />

            <p><span class="darkerColor">Actors</span></p>
            <p>@string.Join(", ", _movie.Actors)</p>
            <br />

            <p><span class="darkerColor">Story</span></p>
            <p>@_movie.Description</p>
            <br />


            <p><span class="darkerColor">Release Year:</span> @_movie.ReleaseYear</p>
            <p><span class="darkerColor">Length:</span> @_movie.Length min</p>
            <p><span class="darkerColor">Rating:</span> <span class="ratingColor">@_movie.Rating</span></p>
            <br />

            <p class="moviePrice">$@_movie.Price</p>
            <br />

            <AddRemove MovieId=_movie.Id Cart=_cart />

        </div>

    </div>
}

@code {
    [Parameter] public int id { get; set; }

    private Movie? _movie;
    private List<int> _cart = new();

    protected override async Task OnInitializedAsync()
    {
        _movie = await moviesService.GetMovieAsync(id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            _cart = await localStorage.GetItemAsync<List<int>>("cart") ?? new List<int>();
            StateHasChanged();
        };
    }
}
