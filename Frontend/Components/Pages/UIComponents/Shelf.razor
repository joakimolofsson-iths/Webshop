@using Models

<div class="shelfContainer">
    @foreach(var book in Books)
    {
        <div class="vhsContainer @(book == SelectedBook ? "expanded" : "" )" @onclick="() => ToggleExpanded(book)" >
            <div class="vhsFront">
                <p>@book.Name</p>
                <img src="@vhsFrontImageMap[book]" alt="VHS Tape" />
            </div>
            <div class="vhsSide">
                <button @onclick="() => DoSomething()" @onclick:stopPropagation="true" @onclick:preventDefault="true">Add to Cart</button>
                <a href="/books/@book.Id">Product Page</a>
                <img src="@book.ImageUrl" alt="VHS Cover" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public required List<Book> Books { get; set; }

    private readonly Random _random = new();
    private readonly string[] vhsFrontImages =
    {
        "media/images/vhs_1.jpg",
        "media/images/vhs_2.jpg",
        "media/images/vhs_3.jpg"
    };
    private Book? SelectedBook = null;
    private Dictionary<Book, string> vhsFrontImageMap = new();

    protected override void OnParametersSet()
    {
        foreach (var book in Books)
        {
            if (!vhsFrontImageMap.ContainsKey(book))
            {
                vhsFrontImageMap[book] = vhsFrontImages[_random.Next(vhsFrontImages.Length)];
            }
        }
    }

    private void ToggleExpanded(Book book)
    {
        SelectedBook = (SelectedBook == book) ? null : book;
    }

    private void DoSomething()
    {
        
    }
}
