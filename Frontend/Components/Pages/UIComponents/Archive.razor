@using Models

<div class="archiveContainer">
    @foreach (var book in Books)
    {
        <div class="vhsContainer @GetClassForContainer(book)"
             style="background-image:url(@book.ImageUrl)"
             @onclick="() => ToggleVisibility(book)">
            <p>@book.Name</p>

            <!-- Hidden div that will appear when the container is clicked -->
            @if (IsVisible(book))
            {
                <div class="extraInfo">
                    <p>More information about @book.Name</p>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public required List<Book> Books { get; set; }

    // To track which containers should have the "selected" class
    private List<Book> selectedBooks = new List<Book>();

    // To track which containers should display the extra info
    private List<Book> visibleBooks = new List<Book>();

    // This method is called when a container is clicked
    private void ToggleVisibility(Book book)
    {
        if (visibleBooks.Contains(book))
        {
            visibleBooks.Remove(book); // Hide the extra info
        }
        else
        {
            visibleBooks.Add(book); // Show the extra info
        }
    }

    // This method checks if the extra info should be visible
    private bool IsVisible(Book book)
    {
        return visibleBooks.Contains(book);
    }

    // This method returns a class based on whether the book is selected
    private string GetClassForContainer(Book book)
    {
        return selectedBooks.Contains(book) ? "selected" : "";
    }
}
